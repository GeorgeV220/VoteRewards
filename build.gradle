buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'kr.entree.spigradle' version '2.4.2'
    id 'io.freefair.lombok' version '6.5.1'
    id 'java'
    id 'jacoco'
    id 'idea'
}

apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/publish.gradle"

if (project.hasProperty("local_script")) {
    apply from: file(local_script + "/build.local.gradle")
}

sourceCompatibility = 17
targetCompatibility = 17

ext {
    mcVersion = project.property("mcVersion")
}

group project.property("group")

spigot {
    name = project.property("pluginName")
    authors = [project.property("author")] as List<String>
    apiVersion = project.property("apiVersion")
    load = POSTWORLD
    libraries = ["org.mongodb:mongo-java-driver:3.12.11",
                 "mysql:mysql-connector-java:8.0.31",
                 "org.xerial:sqlite-jdbc:3.39.3.0",
                 "com.google.guava:guava:31.1-jre",
                 "org.postgresql:postgresql:42.5.0",
                 "commons-io:commons-io:2.11.0",
                 "commons-codec:commons-codec:1.15"]
    depends = ['Votifier']
    softDepends = ['PlaceholderAPI',
                   'ProtocolLib',
                   'AuthMeReloaded',
                   'WorldEdit',
                   'WorldGuard']
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

javadoc {
    options.encoding = 'UTF-8'
}

archivesBaseName = project.property("pluginName")

repositories {
    mavenLocal()
    mavenCentral()
    papermc()
    bungeecord()
    codemc()
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.aikar.co/content/groups/aikar/' }
    maven { url = 'https://repo.dmulloy2.net/repository/public/' }
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:${mcVersion}-R0.1-SNAPSHOT"

    implementation(bStats())
    implementation 'co.aikar:acf-paper:0.5.1-SNAPSHOT'
    implementation 'com.github.GeorgeV220:API:5.4.0'
    implementation 'com.github.juliarn:npc-lib:2.6-RELEASE'
    implementation 'com.github.GeorgeV220:Hologram-Lib:1.3.0-G'
    implementation 'org.codemc.worldguardwrapper:worldguardwrapper:1.2.0-SNAPSHOT'

    compileOnly 'me.clip:placeholderapi:2.11.2'
    compileOnly 'fr.xephi:authme:5.6.0-SNAPSHOT'
    compileOnly 'com.github.NuVotifier.NuVotifier:nuvotifier-api:2.7.2'
    compileOnly 'com.github.NuVotifier.NuVotifier:nuvotifier-bukkit:2.7.2'
    compileOnly 'org.apache.commons:commons-lang3:3.12.0'
    compileOnly 'com.google.guava:guava:31.1-jre'
    compileOnly 'org.mongodb:mongo-java-driver:3.12.11'
    compileOnly 'org.jetbrains:annotations:23.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    //testImplementation 'com.github.seeseemelk:MockBukkit-v1.18:1.24.1'
    testImplementation 'org.assertj:assertj-core:3.23.1'
}

shadowJar {
    archiveClassifier = ''
    exclude 'com/cryptomorin/**'
    relocate 'co.aikar.commands', "${packageName}.acf"
    relocate 'co.aikar.locales', "${packageName}.locales"
    relocate 'org.bstats', "${packageName}.bstats"
    relocate 'com.georgev22.api', "${packageName}.api"
    relocate 'de.tr7zw.changeme.nbtapi', "${packageName}.api.nbtapi"
    relocate 'de.tr7zw.nbtapi', "${packageName}.api.nbtapi'"
    relocate 'de.tr7zw.annotations', "${packageName}.api.annotations"
    relocate 'com.github.juliarn.npc', "${packageName}.api.npc"
    relocate 'com.github.juliarn.relocation', "${packageName}.api.npc"
    relocate 'com.github.unldenis.hologram', "${packageName}.api.hologram"
    relocate 'org.codemc.worldguardwrapper', "${packageName}.api.worldguardwrapper"
}

tasks.build.dependsOn(shadowJar)
tasks.publish.dependsOn(shadowJar)
tasks.prepareSpigotPlugins.dependsOn(shadowJar)

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
    ignoreFailures = false
}

processResources {
    project.properties.put("version", this.version)
    expand project.properties
}

defaultTasks 'clean build'
